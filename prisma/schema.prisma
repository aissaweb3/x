generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Platform {
  TWITTER
  YOUTUBE
  TELEGRAM
  DISCORD
}

enum TaskType {
  FOLLOW
  LIKE
  REPOST
  COMMENT
  WATCH
  REACT
}

enum TaskVerificationType {
  SCREEN_SHOT
  LINK_PROOF
  JWT_CODE
  AUTO_API
}

enum TaskStatusEnum {
  NONE
  PENDING
  COMPLETED
}

enum Account {
  NONE
  TWITTER
  DISCORD
}

model User {
  id              String       @id @default(uuid()) @db.VarChar(36)
  mainAccount     Account
  mainAccountId   String       @unique
  mainAccountName String       @unique @db.VarChar(100)
  discordId       String       @unique @db.VarChar(50)
  discordName     String       @unique @db.VarChar(50)
  twitterId       String       @unique @db.VarChar(50)
  twitterName     String       @unique @db.VarChar(50)
  telegramId      String       @unique @db.VarChar(50)
  telegramName    String       @unique @db.VarChar(50)
  referralId      String       @unique @default(uuid()) @db.VarChar(36)
  email           String?
  walletAddress   String?
  password        String?
  xp              Int          @default(0)
  referrals       Int          @default(0)
  referredBy      String?
  createdAt       DateTime     @default(now())
  tasks           TaskStatus[]
  NFTs            UserNFT[]
}

model Task {
  id                   String               @id @default(uuid()) @db.VarChar(36)
  xp                   Int
  title                String
  description          String
  link                 String
  channelId            String?
  platform             Platform
  taskType             TaskType
  taskVerificationType TaskVerificationType
  active               Boolean              @default(true)
  daily                Boolean
  createdAt            DateTime             @default(now())
  expiresAt            DateTime?
  userStatuses         TaskStatus[]
}

model TaskStatus {
  id               String         @id @default(uuid()) @db.VarChar(36)
  xp               Int
  userId           String
  taskId           String
  status           TaskStatusEnum
  screenShot       String?
  verificationLink String?
  user             User           @relation(fields: [userId], references: [id])
  task             Task           @relation(fields: [taskId], references: [id])
  createdAt        DateTime       @default(now())

  @@unique([userId, taskId])
}

model NFT {
  id    String    @id @default(uuid()) @db.VarChar(36)
  url   String
  xp    Int
  name  String    @unique
  img   String
  users UserNFT[]
}

model UserNFT {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String
  nftId     String
  user      User     @relation(fields: [userId], references: [id])
  nft       NFT      @relation(fields: [nftId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, nftId])
}
