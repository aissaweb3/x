generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Platform {
  TWITTER
  YOUTUBE
  TELEGRAM
}

enum TaskType {
  FOLLOW
  LIKE
  REPOST
}

enum TaskStatusEnum {
  NONE
  PENDING
  COMPLETED
}

model User {
  id            String       @id @default(uuid()) @db.VarChar(36)
  discord       String       @unique
  twitter       String       @unique
  email         String       @unique
  walletAddress String?
  password      String?
  xp            Int          @default(0)
  createdAt     DateTime     @default(now())
  tasks         TaskStatus[] // Relationship with TaskStatus model for user's tasks
  ownedNFT      NFT[]
  taskOrders    TaskOrder[]
}

model Task {
  id           String       @id @default(uuid()) @db.VarChar(36)
  xp           Int
  title        String
  description  String
  link         String
  platform     Platform
  taskType     TaskType
  pendingTasks TaskOrder[]
  active       Boolean      @default(true)
  createdAt    DateTime     @default(now())
  expiresAt    DateTime?
  userStatuses TaskStatus[] // Relationship with TaskStatus model for task's users
}

model TaskStatus {
  id        String         @id @default(uuid()) @db.VarChar(36)
  userId    String
  taskId    String
  status    TaskStatusEnum
  user      User           @relation(fields: [userId], references: [id])
  task      Task           @relation(fields: [taskId], references: [id])
  createdAt DateTime       @default(now())

  @@unique([userId, taskId]) // Ensure a user-task combination is unique
}

model TaskOrder {
  id     String @id @default(uuid()) @db.VarChar(36)
  User   User   @relation(fields: [userId], references: [id])
  userId String @db.VarChar(36)
  Task   Task   @relation(fields: [taskId], references: [id])
  taskId String @db.VarChar(36)
}

model NFT {
  id      String @id @default(uuid()) @db.VarChar(36)
  address String
  User    User   @relation(fields: [userId], references: [id])
  userId  String @db.VarChar(36)
}
